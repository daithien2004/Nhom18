import * as conversationService from '../services/conversationService.js';
import { asyncHandler } from '../middlewares/asyncHandler.js';
import { sendSuccess } from '../utils/response.js';
import * as messageService from '../services/messageService.js';

export const createConversation = asyncHandler(async (req, res) => {
  const { participants, isGroup, groupName, groupAvatar, status } = req.body;

  // th√™m lu√¥n user ƒëang login v√†o participants n·∫øu ch∆∞a c√≥
  if (!participants.includes(req.user.id.toString())) {
    participants.push(req.user.id);
  }

  const conversation = await conversationService.createConversation(
    participants,
    isGroup,
    groupName,
    groupAvatar,
    status
  );

  return sendSuccess(res, conversation, 'T·∫°o h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const getMessages = asyncHandler(async (req, res) => {
  const { page = 1, limit = 20 } = req.query;
  const msgs = await conversationService.getMessages({
    conversationId: req.params.conversationId,
    page,
    limit,
  });
  return sendSuccess(res, msgs, 'L·∫•y danh s√°ch tin nh·∫Øn th√†nh c√¥ng');
});

export const getOrCreateConversation = asyncHandler(async (req, res) => {
  const { userId } = req.params; // ng∆∞·ªùi kia
  const currentUserId = req.user.id;

  // 1. T√¨m conversation ƒë√£ t·ªìn t·∫°i
  let conversation = await conversationService.getConversationBetweenUsers(
    userId,
    currentUserId
  );

  // 2. N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
  if (!conversation) {
    const participants = [userId, currentUserId];

    conversation = await conversationService.createConversation({
      participants,
      isGroup: false,
      status: 'pending', // üëà v√¨ ch∆∞a k·∫øt b·∫°n
    });
  }

  return sendSuccess(res, conversation, 'L·∫•y ho·∫∑c t·∫°o h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const getConversations = asyncHandler(async (req, res) => {
  const convs = await conversationService.getConversations(req.user.id);
  return sendSuccess(res, convs, 'L·∫•y danh s√°ch h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const sendMessage = asyncHandler(async (req, res) => {
  const { conversationId } = req.params;
  const { text, attachments } = req.body;

  const message = await messageService.sendMessage(
    conversationId,
    req.user.id,
    text,
    attachments
  );

  // L·∫•y io t·ª´ app
  const io = req.app.get('io');
  // Emit realtime cho c√°c client trong conversation
  if (io) {
    io.to(conversationId).emit('newMessage', message);
  }

  return sendSuccess(res, message, 'G·ª≠i tin nh·∫Øn th√†nh c√¥ng');
});
