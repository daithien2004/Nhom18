import * as conversationService from '../services/conversationService.js';
import { asyncHandler } from '../middlewares/asyncHandler.js';
import { sendSuccess } from '../utils/response.js';
import * as messageService from '../services/messageService.js';

export const createConversation = asyncHandler(async (req, res) => {
  const { participants, isGroup, groupName, groupAvatar, status } = req.body;

  // th√™m lu√¥n user ƒëang login v√†o participants n·∫øu ch∆∞a c√≥
  if (!participants.includes(req.user.id.toString())) {
    participants.push(req.user.id);
  }

  const conversation = await conversationService.createConversation(
    participants,
    isGroup,
    groupName,
    groupAvatar,
    status
  );

  return sendSuccess(res, conversation, 'T·∫°o h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const getMessages = asyncHandler(async (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  const msgs = await conversationService.getMessages({
    conversationId: req.params.conversationId,
    page,
    limit,
  });
  return sendSuccess(res, msgs, 'L·∫•y danh s√°ch tin nh·∫Øn th√†nh c√¥ng');
});

export const getOrCreateConversation = asyncHandler(async (req, res) => {
  const { userId } = req.params; // ng∆∞·ªùi kia
  const currentUserId = req.user.id;

  // 1. T√¨m conversation ƒë√£ t·ªìn t·∫°i
  let conversation = await conversationService.getConversationBetweenUsers(
    userId,
    currentUserId
  );

  // 2. N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
  if (!conversation) {
    const participants = [userId, currentUserId];

    conversation = await conversationService.createConversation({
      participants,
      isGroup: false,
      status: 'pending', // üëà v√¨ ch∆∞a k·∫øt b·∫°n
    });
  }

  return sendSuccess(res, conversation, 'L·∫•y ho·∫∑c t·∫°o h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const getConversations = asyncHandler(async (req, res) => {
  const convs = await conversationService.getConversations(req.user.id);
  return sendSuccess(res, convs, 'L·∫•y danh s√°ch h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const sendMessage = asyncHandler(async (req, res) => {
  const { conversationId } = req.params;
  const { text, attachments } = req.body;

  const message = await messageService.sendMessage(
    conversationId,
    req.user.id,
    text,
    attachments
  );

  // L·∫•y io t·ª´ app
  const chatIo = req.app.get('chatIo');
  // Emit realtime cho c√°c client trong conversation
  if (chatIo) {
    chatIo.to(conversationId).emit('sendMessage', message);
    console.log('Message sent');
  }

  return sendSuccess(res, message, 'G·ª≠i tin nh·∫Øn th√†nh c√¥ng');
});

export const getConversationSettings = asyncHandler(async (req, res) => {
  const { conversationId } = req.params;
  const settings = await conversationService.getConversationSettings(
    conversationId
  );
  return sendSuccess(res, settings, 'L·∫•y c√†i ƒë·∫∑t h·ªôi tho·∫°i th√†nh c√¥ng');
});

export const updateConversationSettings = asyncHandler(async (req, res) => {
  const { conversationId } = req.params;
  const settings = req.body;
  const updatedSettings = await conversationService.updateConversationSettings(
    conversationId,
    settings
  );

  // Emit s·ª± ki·ªán WebSocket
  const chatIo = req.app.get('chatIo');
  if (chatIo) {
    chatIo.to(conversationId).emit('settingsUpdated', {
      conversationId,
      settings: updatedSettings,
    });
  }

  return sendSuccess(
    res,
    updatedSettings,
    'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t h·ªôi tho·∫°i th√†nh c√¥ng'
  );
});

export const addMessageReaction = asyncHandler(async (req, res) => {
  const { conversationId, messageId } = req.params;
  const { emoji } = req.body;
  const userId = req.user.id;
  const message = await conversationService.addMessageReaction(
    conversationId,
    messageId,
    userId,
    emoji
  );

  // Emit s·ª± ki·ªán WebSocket
  const chatIo = req.app.get('chatIo');
  if (chatIo) {
    chatIo.to(conversationId).emit('reactionAdded', {
      conversationId,
      messageId,
      reaction: { [userId]: emoji },
    });
  }

  return sendSuccess(res, message, 'Th√™m reaction th√†nh c√¥ng');
});

export const updateMessageStatus = asyncHandler(async (req, res) => {
  const { conversationId, messageId } = req.params;
  const { status } = req.body;
  const userId = req.user.id;

  const message = await messageService.updateMessageStatus(
    conversationId,
    messageId,
    userId,
    status
  );

  // Emit s·ª± ki·ªán WebSocket
  const chatIo = req.app.get('chatIo');
  if (chatIo) {
    chatIo.to(conversationId).emit('messageStatusUpdated', {
      conversationId,
      messageId,
      status,
      readBy: message.readBy,
    });
  }

  return sendSuccess(res, message, 'C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th√†nh c√¥ng');
});
